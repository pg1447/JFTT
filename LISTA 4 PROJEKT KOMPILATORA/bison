%{
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#define YYERROR_VERBOSE

extern int yylineno;
extern char *yytext;

int yylex(void);
void yyerror(char const *,...);
void yyerror2(const char *fmt);
void yyset_in( FILE * in_str );

struct Declaration {
	char *Id;
	int Type;
	long long Position;
	long long From;
	long long Size;
	int Initiated;
	struct Declaration *Next;
};

struct Variable {
	char *Id;
	int Type;
	int Linie;
	struct Variable *Element;
};

struct Condition {
	int Type;
	struct Variable* Z0;
	struct Variable* Z1;
};

struct Expression {
	int Type;
	struct Variable* Z0;
	struct Variable* Z1;
};

struct Command {
	int Type;
	struct Variable* Z0;
	struct Variable* Z1;
	struct Variable* Z2;
	struct Condition* Wa;
	struct Expression* Wy;
	struct Command* K0;
	struct Command* K1;
	struct Command* Next;
};

struct Linie{
	char *Text;
	struct Linie *Next;
};

struct QueueLines{
	long long Size;
	struct Linie* First;
	struct Linie* Last;
};

static int NumberOfLoops = 0;
static int CurrentNesting = 0;
static int MemoryForCalculations = 1;
static struct Declaration *Dek = NULL;
static struct QueueLines *Kol = NULL;
FILE *dataToSave;

int Declare(int typ, char* id, long long rozmiar);
int DeclareTab(int typ, char* id, long long rod, long long rdo);
int DeclareFor(char* id);
void RemoveForDeclarations(char* id);
struct Declaration *SearchForDeclaration(char* id);
struct Variable *GenerateVariable(int typ, char *id, struct Variable *element, int linia);
struct Condition *GenerateCondition(int typ, struct Variable* z0, struct Variable *z1);
struct Expression *GenerateExpression(int typ, struct Variable* z0, struct Variable *z1);
struct Command *GenerateCommand(int typ, struct Variable* z0, struct Variable *z1, struct Variable *z2, struct Expression *wy, struct Condition *wa, struct Command *k0, struct Command *k1);
int CheckItOut(struct Command *k);
void Compile(struct Command *k);
%}

%union {
	char* id;
	struct Variable* zmi;
	struct Condition* war;
	struct Expression* wyr;
	struct Command* kom;
}
%type <zmi> identifier
%type <kom> command
%type <kom> commands
%type <kom> program
%type <wyr> expression
%type <zmi> value
%type <war> condition

%token _declare _begin _end _if _then _else _endif _while _do _endwhile _repeat _until _for _from _to _downto _endfor _read _write _zmi _odd _sre _prz _dod _ode _mno _dzi _mod _row _roz _mni _wie _nwi _nmn _na0 _na1;
%token <id> number;
%token <id> pidentifier;
%%

input:
	program
	{
		Compile($1);
	}
program:
	_declare vdeclarations _begin commands _end 
	{
		if(CheckItOut($4) != 0) return -1;
		$$ = $4;
	}
	| _begin commands _end 
	{
		if(CheckItOut($2) != 0) return -1;
		$$ = $2;
	}
vdeclarations:
	vdeclarations _zmi pidentifier 
	{
		if(Declare(0,$3,0) != 0) {
			char mess[1000];
			sprintf(mess,"druga deklaracja %s",$3);
		 	yyerror2(mess);
		 	YYERROR;
		}
	} 
	| vdeclarations _zmi pidentifier _na0 number _odd number _na1 	 
	{	
		char mess[1000];
		switch(DeclareTab(1,$3,atoll($5), atoll($7))){
			case -1:
				sprintf(mess,"druga deklaracja %s",$3);
				yyerror2(mess);
				YYERROR;
				break;
			case -2:
				sprintf(mess,"niewlasciwy zakres tablicy %s",$3);
				yyerror2(mess);
				YYERROR;
		}
	} 
	| pidentifier 
	{
		if(Declare(0,$1,0) != 0) {
			char mess[1000];
			sprintf(mess,"druga deklaracja %s",$1);
		 	yyerror2(mess);
		 	YYERROR;
		}
	} 
	| pidentifier _na0 number _odd number _na1 	 
	{	
		char mess[1000];
		switch(DeclareTab(1,$1,atoll($3), atoll($5))){
			case -1:
				sprintf(mess,"druga deklaracja %s",$1);
				yyerror2(mess);
				YYERROR;
				break;
			case -2:
				sprintf(mess,"niewlasciwy zakres tablicy %s",$1);
				yyerror2(mess);
				YYERROR;
		}
	} 
commands:
	commands command 
	{
		struct Command *ptr = $1;
		while(ptr->Next != NULL)
			ptr = ptr->Next;
		ptr->Next = $2;
		$$ = $1;
	}
	| command 
	{
		$$ = $1;
	}
command:
	identifier _prz expression _sre 
	{
		$$ = GenerateCommand(0,$1,NULL,NULL,$3,NULL,NULL,NULL);
	}
	| _if condition _then commands _else commands _endif 
	{
		$$ = GenerateCommand(1,NULL,NULL,NULL,NULL,$2,$4,$6);
	}
	| _if condition _then commands _endif									
	{
		$$ = GenerateCommand(2,NULL,NULL,NULL,NULL,$2,$4,NULL);
	}
	| _while condition _do commands _endwhile								
	{
		$$ = GenerateCommand(3,NULL,NULL,NULL,NULL,$2,$4,NULL);
	}
	|  _repeat commands _until condition _sre							
	{
		$$ = GenerateCommand(4,NULL,NULL,NULL,NULL,$4,$2,NULL);
	}
	| _for pidentifier _from value _to value _do commands _endfor			
	{
		$$ = GenerateCommand(5,GenerateVariable(2,$2,NULL,yylineno),$4,$6,NULL,NULL,$8,NULL);
	}
	| _for pidentifier _from value _downto value _do commands _endfor		
	{
		$$ = GenerateCommand(6,GenerateVariable(2,$2,NULL,yylineno),$4,$6,NULL,NULL,$8,NULL);
	}
	| _read identifier _sre												
	{
		$$ = GenerateCommand(7,$2,NULL,NULL,NULL,NULL,NULL,NULL);
	}
	| _write value _sre													
	{
		$$ = GenerateCommand(8,$2,NULL,NULL,NULL,NULL,NULL,NULL);
	}
expression:
	value 
	{
		$$ = GenerateExpression(0,$1,NULL);
	}
	| value _dod value 
	{
		$$ = GenerateExpression(1,$1,$3);
	}
	| value _ode value 
	{
		$$ = GenerateExpression(2,$1,$3);
	}
	| value _mno value 
	{
		$$ = GenerateExpression(3,$1,$3);
	}
	| value _dzi value 
	{
		$$ = GenerateExpression(4,$1,$3);
	}
	| value _mod value 
	{
		$$ = GenerateExpression(5,$1,$3);
	}
condition:
	value _row value 
	{
		$$ = GenerateCondition(0,$1,$3);
	}
	| value _roz value	
	{
		$$ = GenerateCondition(1,$1,$3);
	}
	| value _mni value
	{
		$$ = GenerateCondition(2,$1,$3);
	}
	| value _wie value
	{
		$$ = GenerateCondition(3,$1,$3);
	}
	| value _nwi value	
	{
		$$ = GenerateCondition(4,$1,$3);
	}
	| value _nmn value	
	{
		$$ = GenerateCondition(5,$1,$3);
	}
value:
	number 
	{
		$$ = GenerateVariable(3,$1,NULL,yylineno);
	}
	| identifier
	{
		$$ = $1; 
	}
identifier:
	pidentifier
	{
		$$ = GenerateVariable(0,$1,NULL,yylineno);
	}
	 | pidentifier _na0 pidentifier _na1 
	 {
	 	$$ = GenerateVariable(1,$1,GenerateVariable(0,$3,NULL,yylineno),yylineno);
	 }
	 | pidentifier _na0 number _na1 
	 {
	 	$$ = GenerateVariable(1,$1,GenerateVariable(3,$3,NULL,yylineno),yylineno);
	 }
%%

void yyerror2(const char *fmt){
	printf("Blad w linii %d: %s \n",yylineno,fmt);
	exit(1);
}

void yyerror(const char *fmt,...){
	printf("Blad w linii %d: nierozpoznany napis %s\n",yylineno,yytext);
	exit(1);
}



int main(int argc, char const * argv[]){
	FILE *data = fopen( argv[1], "r" );
	dataToSave = fopen( argv[2], "w" );
	yyset_in( data );
	yyparse();

}

struct Declaration *SearchForDeclaration(char* id){
	if(Dek == NULL) return NULL;
	struct Declaration *result = Dek;
	while(result != NULL){
		if(strcmp(result->Id, id) == 0)	return result;
		result = result->Next;
	}
	return NULL;
}


int Declare(int typ, char* id, long long rozmiar){
	struct Declaration *ptr = SearchForDeclaration(id);
	
	if(ptr != NULL) return -1;
 	
	struct Declaration *result = malloc(sizeof(struct Declaration));
	result->Type = typ;
	result->Size = rozmiar;
	result->Initiated = result->Position = 0;
	result->Id = malloc(sizeof(char)*(strlen(id)+1));
	result->Next = NULL;
	strcpy(result->Id, id);

	if(Dek == NULL)
		Dek = result;
	else{
		ptr = Dek;
		while(ptr->Next != NULL)
			ptr = ptr->Next;
		ptr->Next = result;
	}
	return 0;
}

int DeclareTab(int typ, char* id, long long rod, long long rdo){
	struct Declaration *ptr = SearchForDeclaration(id);
	
	if(ptr != NULL) return -1;
	if(rdo < rod) return -2;
 	
	struct Declaration *result = malloc(sizeof(struct Declaration));
	result->Type = typ;
	result->From = rod;
	result->Size =  rdo  - rod + 1;
	result->Initiated = result->Position = 0;
	result->Id = malloc(sizeof(char)*(strlen(id)+1));
	result->Next = NULL;
	strcpy(result->Id, id);

	if(Dek == NULL)
		Dek = result;
	else{
		ptr = Dek;
		while(ptr->Next != NULL)
			ptr = ptr->Next;
		ptr->Next = result;
	}
	return 0;
}

int DeclareFor(char* id){

	struct Declaration *ptr = SearchForDeclaration(id);
	if(ptr != NULL) return -1;

	struct Declaration *result = malloc(sizeof(struct Declaration));
	result->Type = 2;
	result->Size = 0;
	result->Initiated = 1;
	result->Position = MemoryForCalculations + CurrentNesting * 2;
	result->Id = malloc(sizeof(char)*(strlen(id)+1));
	result->Next = NULL;
	strcpy(result->Id, id);
	CurrentNesting++;
	NumberOfLoops = NumberOfLoops < CurrentNesting ? CurrentNesting : NumberOfLoops;
	if(Dek == NULL)
		Dek = result;
	else{
		ptr = Dek;
		while(ptr->Next != NULL)
			ptr = ptr->Next;
		ptr->Next = result;
	}
	return 0;
}

void RemoveForDeclarations(char* id){
	if(Dek == NULL) return;
	CurrentNesting--;
	if(strcmp(Dek->Id, id) == 0)
		Dek = Dek->Next;
	else{
			struct Declaration *ptr = Dek;
		while(ptr->Next != NULL){
			if(strcmp(ptr->Next->Id, id) == 0){
				ptr->Next = ptr->Next->Next;
				return;
			}
			ptr = ptr->Next;
		}
	}
}

struct Variable *GenerateVariable(int typ, char *id, struct Variable *element, int linia){
	struct Variable *result = malloc(sizeof(struct Variable));
	result->Type = typ;
	result->Id = malloc(sizeof(char)*(strlen(id)+1));
	strcpy(result->Id, id);
	result->Element = element;
	result->Linie = linia;
	return result;
}
struct Condition *GenerateCondition(int typ, struct Variable* z0, struct Variable *z1){
	struct Condition *result = malloc(sizeof(struct Condition));
	result->Type = typ;
	result->Z0 = z0;
	result->Z1 = z1;
	return result;
}
struct Expression *GenerateExpression(int typ, struct Variable* z0, struct Variable *z1){
	struct Expression *result = malloc(sizeof(struct Expression));
	result->Type = typ;
	result->Z0 = z0;
	result->Z1 = z1;
	return result;
}
struct Command *GenerateCommand(int typ, struct Variable* z0, struct Variable *z1, struct Variable *z2, struct Expression *wy, struct Condition *wa, struct Command *k0, struct Command *k1){
	struct Command *result = malloc(sizeof(struct Command));
	result->Type = typ;
	result->Z0 = z0;
	result->Z1 = z1;
	result->Z2 = z2;
	result->Wy = wy;
	result->Wa = wa;
	result->K0 = k0;
	result->K1 = k1;
	result->Next = NULL;
	return result;
}

int CheckItOutVariable(struct Variable *z0, int init){
	if(z0->Type == 3) return 0;
	struct Declaration *ptr = SearchForDeclaration(z0->Id);
	if(ptr == NULL){
		printf("Blad w linii %d: niezadeklarowana zmienna %s\n", z0->Linie, z0->Id);
		return -1;
	}
	switch(ptr->Type){
		case 0: 
			if(z0->Type == 1){
				printf("Blad w linii %d: niewlasciwe uzycie zmiennej %s\n", z0->Linie, z0->Id);
				exit(-1);
			}
			break;
		case 1:
			if(z0->Type != 1){
				printf("Blad w linii %d: niewlasciwe uzycie zmiennej tablicowej %s\n", z0->Linie, z0->Id);
				exit(-1);
			}
			if(z0->Element->Type == 3){
				if(ptr->Size + ptr->From < atoll(z0->Element->Id)){
					printf("Blad w linii %d: niewlasciwy zakres tablicy %s\n", z0->Linie, z0->Id);
					exit(-1);
				}
				if(ptr->From > atoll(z0->Element->Id)){
					printf("Blad w linii %d: niewlasciwy zakres tablicy %s\n", z0->Linie, z0->Id);
					exit(-1);
				}
				
			}else{
				if(CheckItOutVariable(z0->Element, 1) != 0) return -1;
			}
			break;
		case 2: 
			if(z0->Type == 1){
				printf("Blad w linii %d: niewlasciwe uzycie zmiennej %s\n", z0->Linie, z0->Id);
				exit(-1);
			}
			if(init == 0){
				printf("Blad w linii %d: modyfikacja iteratora petli %s\n", z0->Linie, z0->Id);
				exit(-1);
			}
			return 0;
			break;
	}
	if (init == 0)
		ptr->Initiated = 1;
	else if(ptr->Initiated == 0) {
		printf("Blad w linii %d: użycie niezainicjowanej zmiennej %s\n", z0->Linie, z0->Id);
		exit(-1);
	}
	return 0;
}

int CheckItOut(struct Command *k){
	struct Command *ptr = k;

	while(ptr != NULL){
		switch(ptr->Type){
			case 0: if((CheckItOutVariable(ptr->Z0, 0) + (ptr->Wy->Type == 0 ? CheckItOutVariable(ptr->Wy->Z0, 1) : (CheckItOutVariable(ptr->Wy->Z0, 1) + CheckItOutVariable(ptr->Wy->Z1, 1))) ) != 0) return -1; break;
			case 1: case 2:	case 3:	if((CheckItOutVariable(ptr->Wa->Z0, 1) + CheckItOutVariable(ptr->Wa->Z1, 1) + CheckItOut(ptr->K0) + CheckItOut(ptr->K1)) != 0) return -1; break;
			case 4:	if(CheckItOut(ptr->K0) + CheckItOutVariable(ptr->Wa->Z0, 1) + CheckItOutVariable(ptr->Wa->Z1, 1) != 0) return -1; break;
			case 5: case 6:
				if(DeclareFor(ptr->Z0->Id) != 0){
					printf("Blad w linii %d: zmienna jest juz zadeklarowana %s\n", ptr->Z0->Linie, ptr->Z0->Id);
					return -1;
				}
				if((CheckItOutVariable(ptr->Z1, 1) + CheckItOutVariable(ptr->Z2, 1) + CheckItOut(ptr->K0)) != 0) return -1; 
				RemoveForDeclarations(ptr->Z0->Id);
				break;
			case 7:	if(CheckItOutVariable(ptr->Z0, 0) != 0) return -1; break;
			case 8: if(CheckItOutVariable(ptr->Z0, 1) != 0) return -1; break;
		}
		ptr = ptr->Next;
	}
	return 0;
}

void GeneratePosition(){
	struct Declaration *ptr = Dek;
	long long i = MemoryForCalculations + NumberOfLoops * 2;
	while(ptr != NULL){
		if(ptr->Type == 0)
			ptr->Position = i++;
		else{
			ptr->Position = i;
			i += ptr->Size;
		}
		ptr = ptr->Next;
	}
}

struct Linie *NewLine(char* tekst){
	if(Kol->First == NULL){
		Kol->First = Kol->Last = malloc(sizeof(struct Linie));
	}else{
		Kol->Last->Next =  malloc(sizeof(struct Linie));
		Kol->Last = Kol->Last->Next;
	}

	Kol->Last->Next = NULL;
	Kol->Last->Text = malloc(sizeof(char)*999);
	sprintf(Kol->Last->Text,"%s",tekst);
	Kol->Size++;
	return Kol->Last;
}

void NewLineNumber(char* tekst, long long liczba){
	if(Kol->First == NULL){
		Kol->First = Kol->Last = malloc(sizeof(struct Linie));
	}else{
		Kol->Last->Next =  malloc(sizeof(struct Linie));
		Kol->Last = Kol->Last->Next;
	}

	Kol->Last->Next = NULL;
	Kol->Last->Text = malloc(sizeof(char)*999);
	Kol->Size++;
	sprintf(Kol->Last->Text,"%s %lld",tekst,liczba);
}

void EditLine(struct Linie *l, char *tekst, long long liczba){
	sprintf(l->Text,"%s %lld",tekst,liczba);
}

void KExpression(struct Expression *w);
void KMnozenie(struct Expression *w);
void KDzielenie(struct Expression *w);

void KCondition(struct Condition *w);

void KLiczba(long long liczba);
void KValue(struct Variable* z);
void KAdres(struct Variable* z);

void KLiczba(long long liczba){
	NewLine("RESET f");
	if(liczba <= 0) return;
	int tab[999];
	int i=-1;
	while(liczba>0){
		tab[++i] = liczba % 2;
		liczba = liczba / 2;
	}
	NewLine("INC f");
	i--;
	for(i; i>=0; --i){
		NewLine("SHL f");
		if(tab[i]==1)
			NewLine("INC f");
	}
}

void KAdres(struct Variable* z){
	struct Declaration * ptr = SearchForDeclaration(z->Id);
	if(z->Type == 1)
		if(z->Element->Type == 3){ 
			KLiczba(ptr->Position + atoll(z->Element->Id) - ptr->From);
			return;
		}
		else{
			if(ptr->Position >= ptr->From){
				KAdres(z->Element);
				NewLine("LOAD e f");
				KLiczba(ptr->Position - ptr->From);
				NewLine("ADD f e");
				return;
			}else{
				long long dec = ptr->From - ptr->Position;
				KAdres(z->Element);
				NewLine("LOAD e f");
				KLiczba(dec);
				NewLine("SUB e f");
				NewLine("RESET f");
				NewLine("ADD f e");
				return;
			}
		}
	KLiczba(ptr->Position);
	return;
}

void KValue(struct Variable* z){
	if(z->Type == 3)
		KLiczba(atoll(z->Id));
	else{
		KAdres(z);
		NewLine("LOAD f f");
	}
}

void KCondition(struct Condition *w){ //jezeli H = 0 to true w.p.p false
	long long pozycja;
	switch(w->Type){
		case 0: // =
			NewLine("RESET b");
			NewLine("RESET c");
			NewLine("RESET d");
			KValue(w->Z0);
			NewLine("ADD c f");
			NewLine("ADD b f");
			KValue(w->Z1);
			NewLine("ADD d f");
			NewLine("RESET f");
			NewLine("SUB b d");
			NewLineNumber("JZERO b",2); //dalej sprawdzam
			NewLineNumber("JUMP",3); // niestety nierowne
			NewLine("SUB d c");
			NewLineNumber("JZERO d",2); //rowne
			NewLine("INC f");
		break;
		case 1: // !=
			NewLine("RESET b");
			NewLine("RESET c");
			NewLine("RESET d");
			KValue(w->Z0);
			NewLine("ADD c f");
			NewLine("ADD b f");
			KValue(w->Z1);
			NewLine("ADD d f");
			NewLine("RESET f");
			NewLine("SUB b d");
			NewLineNumber("JZERO b", 2); //dalej sprawdzam
			NewLineNumber("JUMP", 5); // na koniec
			NewLine("SUB d c");
			NewLineNumber("JZERO d", 2); //niestety rowne
			NewLineNumber("JUMP",2); // na koniec
			NewLine("INC f");
		break;
		case 2: // <
			NewLine("RESET d");
			KValue(w->Z1);
			NewLine("ADD d f");
			KValue(w->Z0);
			NewLine("INC f");
			NewLine("SUB f d");
		break;
		case 3: // >
			NewLine("RESET d");
			KValue(w->Z0);
			NewLine("ADD d f");
			KValue(w->Z1);
			NewLine("INC f");
			NewLine("SUB f d");
		break;
		case 4: // <=
			NewLine("RESET d");
			KValue(w->Z1);
			NewLine("ADD d f");
			KValue(w->Z0);
			NewLine("SUB f d");
		break;
		case 5: //>=
			NewLine("RESET d");
			KValue(w->Z0);
			NewLine("ADD d f");
			KValue(w->Z1);
			NewLine("SUB f d");
			break;
	}
}


void KExpression(struct Expression *w){
	switch(w->Type){
		case 0:
			KValue(w->Z0);
			break;
		case 1:
			NewLine("RESET d");
			KValue(w->Z0);
			NewLine("ADD d f");
			KValue(w->Z1);
			NewLine("ADD f d");
			break;
		case 2:
			NewLine("RESET d");
			KValue(w->Z1);
			NewLine("ADD d f");
			KValue(w->Z0);
			NewLine("SUB f d");
			break;
		case 3: KMnozenie(w); break;
		case 4: KDzielenie(w); break;
		case 5: 
			KDzielenie(w); 
			NewLine("RESET f");
			NewLine("ADD f e"); 
			break;	
	}
}
void KMnozenie(struct Expression *w){ //a * b
	NewLine("RESET a");
	NewLine("RESET b");
	KValue(w->Z0);
	NewLine("ADD a f");
	KValue(w->Z1);
	NewLine("ADD b f");
	NewLine("SUB f a");
	NewLineNumber("JZERO f", 7); // sprawdzanie czy a > b optymalizacja 
	NewLine("RESET c");
	NewLine("ADD c a");
	NewLine("RESET a");
	NewLine("ADD a b");
	NewLine("RESET b");
	NewLine("ADD b c");
	NewLine("RESET f");
	NewLineNumber("JZERO b", 7); // b = 0 koniec
	NewLineNumber("JODD b", 2); // b nieparzyste to  dodajemy a* do f
	NewLineNumber("JUMP", 2);
	NewLine("ADD f a");
	NewLine("SHR b"); // b = b / 2
	NewLine("SHL a"); // a = a * 2
	NewLineNumber("JUMP", -6);
}
void KDzielenie(struct Expression *w){ //a / b
	NewLine("RESET a");
	NewLine("RESET b");
	KValue(w->Z0);
	NewLine("ADD a f");
	KValue(w->Z1);
	NewLine("ADD b f");
	NewLine("RESET e"); //wynik modulo
	NewLine("RESET f"); // wynik dzielenia
	NewLineNumber("JZERO b", 27); // na koniec dzielenie przez 0 xxx
	NewLine("RESET c"); //odwracanie a
	NewLine("INC c");
	NewLine("SHL c");
	NewLineNumber("JODD a", 2); 
	NewLineNumber("JUMP", 2);
	NewLine("INC c");
	NewLine("SHR a");
	NewLineNumber("JZERO a", 2); //koniec odwracania
	NewLineNumber("JUMP", -6); //odwracamy dalej
	NewLine("DEC c");
	NewLineNumber("JZERO c", 16); // koniec dzielenia 
	NewLine("INC c");
	NewLine("SHL e");
	NewLineNumber("JODD c", 2); 
	NewLineNumber("JUMP", 2);
	NewLine("INC e");
	NewLine("SHR c");
	NewLine("RESET a");
	NewLine("ADD a b");
	NewLine("SUB a e"); 
	NewLine("SHL f");
	NewLineNumber("JZERO a", 2); //mozemy odjac
	NewLineNumber("JUMP", 3); //nie mozemy odjac
	NewLine("INC f");
	NewLine("SUB e b");
	NewLine("JUMP -16");
}

void CompileCommand(struct Command *k){
	while(k != NULL){
		int adres;
		struct Linie *l0, *l1;
		long long pozycja, forPosition, pozycja2, pozycja3;
		switch(k->Type){
			case 0: //przypisanie
				KExpression(k->Wy);
				NewLine("RESET a");
				NewLine("ADD a f");
				KAdres(k->Z0);
				NewLine("STORE a f");
			break;
			case 1: //if else
				KCondition(k->Wa);
				l0 = NewLine("");
				pozycja = Kol->Size;
				CompileCommand(k->K1);
				l1 = NewLine("");
				pozycja2 = Kol->Size;
				EditLine(l0, "JZERO f", pozycja2 - pozycja + 1);
				CompileCommand(k->K0);
				EditLine(l1, "JUMP", Kol->Size - pozycja2 + 1);
			break;
			case 2:  //if 
				KCondition(k->Wa);
				NewLineNumber("JZERO f", 2);
				l0 = NewLine("");
				pozycja = Kol->Size;
				CompileCommand(k->K0);
				EditLine(l0, "JUMP", Kol->Size - pozycja + 1);
			break;
			case 3:  //while
				pozycja = Kol->Size;
				KCondition(k->Wa);
				NewLineNumber("JZERO f", 2);
				l0 = NewLine("");
				pozycja2 = Kol->Size;
				CompileCommand(k->K0);
				NewLineNumber("JUMP", pozycja - Kol->Size); // wracam na warunek
				EditLine(l0, "JUMP", Kol->Size - pozycja2 + 1); // 
			break;
			case 4:  // repeat 
				pozycja = Kol->Size;
				CompileCommand(k->K0);
				KCondition(k->Wa);
				NewLineNumber("JZERO f", 2);
				NewLineNumber("JUMP", pozycja - Kol->Size);
				break;
			case 5:  //for
				DeclareFor(k->Z0->Id);
				forPosition = SearchForDeclaration(k->Z0->Id)->Position;
				KValue(k->Z1);
				NewLine("RESET a");
				NewLine("RESET b");
				NewLine("RESET c");
				NewLine("ADD a f");
				KLiczba(forPosition);
				NewLine("ADD c f");
				NewLine("STORE a c");
				KValue(k->Z2);
				NewLine("ADD b f");
				NewLine("INC c");
				NewLine("STORE b c"); // zapisano zmienne fora
				NewLine("DEC c"); 
				l0 = NewLine(""); //jednorazowe  a = i, b = To, c = pozycja w pamieci
				pozycja = Kol->Size;
				NewLine("RESET a");
				NewLine("RESET b");
				NewLine("RESET c");
				KLiczba(forPosition);
				NewLine("ADD c f");
				NewLine("LOAD a c");
				NewLine("INC a");
				NewLine("STORE a c");
				NewLine("INC c");
				NewLine("LOAD b c");
				EditLine(l0,"JUMP", Kol->Size - pozycja + 1);
				NewLine("INC b");
				NewLine("SUB b a");
				l1 = NewLine(""); //jezeli zero to koniec petli
				pozycja2 = Kol->Size;
				CompileCommand(k->K0);
				NewLineNumber("JUMP", pozycja - Kol->Size);
				EditLine(l1,"JZERO b", Kol->Size - pozycja2 + 1);
				RemoveForDeclarations(k->Z0->Id);
			break;
			case 6:  //downtofor
				DeclareFor(k->Z0->Id);
				forPosition = SearchForDeclaration(k->Z0->Id)->Position;
				KValue(k->Z1);
				NewLine("RESET a");
				NewLine("RESET b");
				NewLine("RESET c");
				NewLine("ADD a f");
				KLiczba(forPosition);
				NewLine("ADD c f");
				NewLine("STORE a c");
				KValue(k->Z2);
				NewLine("ADD b f");
				NewLine("INC c");
				NewLine("STORE b c"); // zapisano zmienne fora
				NewLine("DEC c");  
				l0 = NewLine(""); // a = i, b = To, c = pozycja w pamieci
				pozycja = Kol->Size;
				NewLine("RESET a");
				NewLine("RESET b");
				NewLine("RESET c");
				KLiczba(forPosition);
				NewLine("ADD c f");
				NewLine("LOAD a c");
				NewLineNumber("JZERO a", 7);// jezeli a juz 0 to koniec
				NewLine("DEC a");
				NewLine("STORE a c");
				NewLine("INC c");
				NewLine("LOAD b c");
				EditLine(l0,"JUMP", Kol->Size - pozycja + 1);
				NewLine("INC a");
				NewLine("SUB a b");
				l1 = NewLine(""); //jezeli zero to koniec petli
				pozycja2 = Kol->Size;
				CompileCommand(k->K0);
				NewLineNumber("JUMP", pozycja - Kol->Size);
				EditLine(l1,"JZERO a", Kol->Size - pozycja2 + 1);
				RemoveForDeclarations(k->Z0->Id);
			break;
			case 7: 	//pobierz
				KAdres(k->Z0);
				NewLine("GET f");
			 break;
			case 8: // wyslij
				if(k->Z0->Type == 3){
					KValue(k->Z0);
					NewLine("RESET a");
					NewLine("STORE f a");
					NewLine("PUT a");
				}else{
					KAdres(k->Z0);				
					NewLine("PUT f");
				}

			break;
		}
		k = k->Next;
	}
}

void Compile(struct Command *k){
	Kol = malloc(sizeof(struct QueueLines));
	Kol->First = NULL;
	Kol->Last = NULL;
	Kol->Size = 0;
	GeneratePosition();
	CompileCommand(k);
	struct Linie *ptr = Kol->First;
	while(ptr != NULL){
		fprintf(dataToSave, "%s\n", ptr->Text);
		ptr = ptr->Next;
	}
	fprintf(dataToSave, "HALT\n");
	fclose(dataToSave);
}
